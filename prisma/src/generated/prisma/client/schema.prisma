// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "src/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  student_id Int      @id @default(autoincrement())
  first_name String   @db.VarChar(100)
  last_name  String   @db.VarChar(100)
  email      String   @unique @db.VarChar(255)
  password   String
  dob        DateTime @db.Date
  photo_url  String?  @db.VarChar(500) // Made optional
  created_at DateTime @default(now()) @db.Timestamp()
  updated_at DateTime @updatedAt @db.Timestamp()

  notes Student_Notes[]

  @@index([email])
  @@map("students")
}

model Teacher {
  teacher_id Int      @id @default(autoincrement())
  first_name String   @db.VarChar(100)
  last_name  String   @db.VarChar(100)
  email      String   @unique @db.VarChar(255)
  password   String
  dob        DateTime @db.Date
  photo_url  String?  @db.VarChar(500) // Made optional
  created_at DateTime @default(now()) @db.Timestamp()
  updated_at DateTime @updatedAt @db.Timestamp()

  video_details Video_Details[]
  notes         Teacher_Notes[]

  @@index([email])
  @@map("teachers")
}

model Video_Details {
  id          Int      @id @default(autoincrement())
  teacher_id  Int
  url         String   @db.VarChar(500)
  title       String   @db.VarChar(200)
  description String   @db.Text
  created_at  DateTime @default(now()) @db.Timestamp()
  updated_at  DateTime @updatedAt @db.Timestamp()

  // Relation
  teacher Teacher @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade)

  @@index([teacher_id])
  @@map("video_details")
}

model Student_Notes {
  id          Int      @id @default(autoincrement())
  student_id  Int
  title       String   @db.VarChar(200)
  description String   @db.Text
  pdf         String?  @db.VarChar(500)
  file        String?  @db.VarChar(500)
  created_at  DateTime @default(now()) @db.Timestamp()
  updated_at  DateTime @updatedAt @db.Timestamp()

  // Relation
  student Student @relation(fields: [student_id], references: [student_id], onDelete: Cascade)

  @@index([student_id])
  @@index([created_at])
  @@map("student_notes")
}

model Teacher_Notes {
  id          Int      @id @default(autoincrement())
  teacher_id  Int
  title       String   @db.VarChar(200)
  description String   @db.Text
  pdf         String?  @db.VarChar(500)
  file        String?  @db.VarChar(500)
  created_at  DateTime @default(now()) @db.Timestamp()
  updated_at  DateTime @updatedAt @db.Timestamp()

  // Relation
  teacher Teacher @relation(fields: [teacher_id], references: [teacher_id], onDelete: Cascade)

  @@index([teacher_id])
  @@index([created_at])
  @@map("teacher_notes")
}
